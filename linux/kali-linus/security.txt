1. `apt install fail2ban` : bans an account after certain number of failed attempt. Prevents brute-force
2. Securing network services:
    - Disable any service that is not required
    - Without firewall, every service is effectivly public as they listen on all network interfaces.
    - Reset default passwords for a service if any
    - Set a password based login if a service has not set password
    - Chek the default password in 'README.Debian' of the package
3. Firewall and packet filtering:
    - Firewall parses incoming and outgoing network packets and allows to pass through only on matching conditions
    - on linux, 'netfilter' is pre-installed firewall
4. Netfilter:
    - `iptables` for ipv4, `ip6tables` for ipv6 : control netfilter from user space
    - Tables to store rules that regulates three types of action on a packet
        - filter : concerns filtering rules (accepting, refusing, or ignoring a packet)
            - It has three standard chains (list of rules)
            - INPUT: concerns packets whose destination is the firewall itself;
            - OUTPUT: concerns packets emitted by the firewall;
            - FORWARD: concerns packets passing through the firewall (which is neither their source nor their destination).
        - nat : (Network Address Translation) concerns translation of source or destination addresses and ports of packets
            - It has three standard chains
            - PREROUTING: to modify packets as soon as they arrive;
            - POSTROUTING: to modify packets when they are ready to go on their way;
             -OUTPUT: to modify packets generated by the firewall itself.
        - mangle : concerns other changes to the IP packets (including the ToS—Type of Service—field and options);
        - raw : allows other manual modifications on packets before they reach the connection tracking system.
    - Each table contains lists of rules called chains. 
    - How the chains are called : Refer 'images/netfilter.png'
        - Each chain is a list of rules
        - each rule is a set of conditions and an action to perform when the conditions are met.
        - When processing a packet, the firewall scans the appropriate chain, one rule after another
        - when the conditions for one rule are met, it jumps (hence the -j option in the commands) to the specified action to continue processing
        - Once an action is taken, then chain scanning is interrupted and action is taken on the packet.
        - Few of the netfilter actions :
            - ACCEPT: allow the packet to go on its way.
            - REJECT: reject the packet with an Internet control message protocol (ICMP) error packet (the --reject-with type option of iptables determines the type of error to send).
            - DROP: delete (ignore) the packet.
        - There are more action listed in man page of 'iptables' and 'ip6tables'
5. ICMP: Internet Control Message Protocol 
    - used to transmit ancillary information on communications.
    - 'ICMP echo request' and 'ICMP echo reply' : To test connectivity using ping command
    - It signals a firewall rejecting a packet, indicates an overflow in a receive buffer, proposes a better route for the next packets
    - This protocol is defined by several RFC documents
        - http://www.faqs.org/rfcs/rfc777.html 
        - http://www.faqs.org/rfcs/rfc792.html 
7. ip6tables and iptables:
    - `iptables -t <tablename>` : -t flag indicates to use 'tablename' as operating table
    - Chain commands:
        - '-L chain' : lists the rules in the chain. This is commonly used with the -n option to disable name resolution (for example, iptables -n -L INPUT will display the rules related to incoming packets).
        - '-N chain' : creates a new chain. You can create new chains for a number of purposes, including testing a new network service or fending off a network attack.
        - '-X chain' : deletes an empty and unused chain (for example, iptables -X ddos-attack).
        - '-A chain rule' : adds a rule at the end of the given chain. Remember that rules are processed from top to bottom so be sure to keep this in mind when adding rules.
        - '-I chain rule_num rule' : inserts a rule before the rule number rule_num. As with the -A option, keep the processing order in mind when inserting new rules into a chain.
        - '-D chain rule_num' : (or -D chain rule) deletes a rule in a chain; the first syntax identifies the rule to be deleted by its number (iptables -L --line-numbers will display these numbers), while the latter identifies it by its contents.
        - '-F chain' : flushes a chain (deletes all its rules). For example, to delete all of the rules related to outgoing packets, you would run iptables -F OUTPUT. If no chain is mentioned, all the rules in the table are deleted.
        - '-P chain action' : defines the default action, or “policy” for a given chain; note that only standard chains can have such a policy. To drop all incoming traffic by default, you would run iptables -P INPUT DROP.
    - Rules :
        - Each rule is expressed as 'conditions -j action action_options'.
        - If several conditions are described in the same rule, then the criterion is the conjunction (logical AND) of the conditions
        - Conditions :
            - '-p protocol' : matches the protocol field of the IP packet. most common values are tcp, udp, icmp, and icmpv6.
            - '--source-port port' and '--destination-port port' : condition to complement above condition with conditions on the TCP ports
            - '-s address' or '-s network/mask' : matches the source address of the packet
            - '-d address' or '-d network/mask' : matches the destination address.
            - '-i interface' : condition selects packets coming from the given network interface.
            - '-o interface' : selects packets going out on a specific interface.
            - '--state state' : matches the state of a packet in a connection
                - this requires the ipt_conntrackkernel module, for connection tracking
                - 'NEW' : state describes a packet starting a new connection
                - 'ESTABLISHED' : matches packets belonging to an already existing connection
                - 'RELATED' : matches packets initiating a new connection related to an existing one
        - Creating rules : 
            - `apt install fwbuilder` : GUI interface for creating rules
8. Examples : 
    - `iptables -A INPUT -s 10.0.1.5 -j DROP` : silently block incoming traffic from the IP address 10.0.1.5
    - `iptables -A INPUT -s 31.13.74.0/24 -j DROP` : silently block incoming traffic from the IP address 1.13.74.0/24 class C subnet
    - `iptables -A INPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT` : permit network traffic for a ssh service on port 22.
    - `iptables -A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT` : permit network traffic for a http service on port 80.
    - `iptables -A INPUT -m state --state NEW -p tcp --dport 143 -j ACCEPT` : permit network traffic for a IMAP service on port 143.
    - `iptables -n -L INPUT  --line-numbers` : List the rules in INPUT chain along with rule numbers
9. Installing the Rules at Each Boot:
    - Register the configuration script in an 'up' directive of the '/etc/network/interfaces' file
    - Eg. Assuming the script generated by fwbuilder is stored under /usr/local/etc/arrakis.fw
        Sample content of '/etc/network/interfaces' :
            """
            auto eth0
            iface eth0 inet static
                address 192.168.0.1
                network 192.168.0.0
                netmask 255.255.255.0
                broadcast 192.168.0.255
                up /usr/local/etc/arrakis.fw
            """

10. Monitoring and logging:
    - 'logcheck' : monitors log files every hour by default and sends unusual log messages in emails to the administrator for further analysis'
        - '/etc/logcheck/logcheck.logfiles' : Stores list of monitored files
        - '/usr/share/doc/logcheck-database/README.logcheck-database.gz' : explains malicious message selection logic
    - `top` : Monitor activities in real time
    - 'gnome-system-monitor' : graphical tool is similar to top
    - Detecting changes in package files:
        - `dpkg --verify`: displays the system files that have been modified (potentially by an attacker)
        - dpkg relies on checksums stored in its own database which is stored on the hard disk in '/var/lib/dpkg/info/package.md5sums'
    - Advanced Intrusion Detection Environment (AIDE) :
        - checks file integrity and detects any change against a previously-recorded image of the valid system
        - The image is stored as a database (/var/lib/aide/aide.db)
        - An image contains information on all files of the system (fingerprints, permissions, timestamps, and so on).
        - `apt install aide' : install aide
        - `aideinit` : nitialize the database 
        - `/etc/cron.daily/aide` : AIDE will run daily to check for any change in system files
        - '/var/log/aide/*.log' : and detected changes are stored in these log files
        - '/etc/default/aide', '/etc/aide/aide.conf', '/etc/aide/aide.conf.d/' : AIDE configuration files
        - 'update-aide.conf' : uses above config files to generate '/aide/aide.conf.autogenerated'
        - '/aide/aide.conf.autogenerated' : It indicates which properties of which files need to be checked
        - '/var/lib/aide/aide.db.new' : new version of database generated daily in this file
    - Other tools : 
        - Tripwire
        - Samhain
        - 'checksecurity' consists of several small scripts that perform basic checks on the system 
        - 'chkrootkit' and 'rkhunter' : detect certain rootkits potentially installed on the system.
        - rootkits are software designed to hide the compromise of a system while discreetly keeping control of the machine